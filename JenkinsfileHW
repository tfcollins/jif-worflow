// Pipeline
lock(label: 'adgt_test_harness_boards') {
	@Library('sdgtt-lib@adgt-test-harness')
    def hdlBranch = "NA"
    def linuxBranch = "NA"
    def bootPartitionBranch = "release"
    def firmwareVersion = 'v0.34'
    def bootfile_source = 'artifactory' // options: sftp, artifactory, http, local
    def harness = getGauntlet(hdlBranch, linuxBranch, bootPartitionBranch, firmwareVersion, bootfile_source)

    //save what triggered the job
    //harness.set_job_trigger(jenkins_job_trigger)
  
    //udpate repos
    harness.set_env('nebula_branch','dev')
    
    //adjust nebula-config for now based on tested branch to address directory naming
	if (bootPartitionBranch.contains("release") || linuxBranch.contains("release")){
		harness.set_env('nebula_config_branch','release')
	}
	
    //update first the agent with the required deps
    harness.set_required_agent(["sdg-nuc-01","sdg-nuc-02"])
    harness.update_agents()

    //set other test parameters
    harness.set_nebula_debug(true)
    harness.set_enable_docker(true)
    harness.set_docker_host_mode(true)
    harness.set_send_telemetry(false)
    harness.set_log_artifacts(false)
    harness.set_enable_resource_queuing(true)
    harness.set_elastic_server('192.168.10.1')
    harness.set_required_hardware(["zynqmp-zcu102-ad9081"])
    harness.set_nebula_local_fs_source_root("artifactory.analog.com")
    harness.set_docker_args(['Vivado'])
  
    // Set stages (Stages are run sequentially on agents.)
    // harness.add_stage(harness.stage_library("UpdateBOOTFiles"), 'stopWhenFail',
    //                  harness.stage_library("RecoverBoard"))
  
    // Test stage
    def stage = { String board ->
        try {
            stage("Test JIF") {
                checkout scm
                sh 'pip3 install -r requirements'
                sh 'python3 -m pytest -vs tests/test_ad9081_wf.py'
            }
        }
        finally
        {
            // dir('build'){
            // 	sh "mv Testing ${board}"
            //     xunit([CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: "${board}/**/*.xml", skipNoTestFiles: false, stopProcessingIfError: true)])
            // }
        }
    }
    harness.add_stage(stage,'continueWhenFail')
  
    // Send results
    harness.add_stage('continueWhenFail')
  
    // Go go
    harness.run_stages()
}
