// Pipeline
lock(label: 'adgt_test_harness_boards') {
    @Library('sdgtt-lib@adgt-test-harness') _
    def hdlBranch = "NA"
    def linuxBranch = "NA"
    def bootPartitionBranch = "master"
    def jenkins_job_trigger = "ci"
    def firmwareVersion = 'v0.34'
    def bootfile_source = 'artifactory' // options: sftp, artifactory, http, local
    def harness = getGauntlet(hdlBranch, linuxBranch, bootPartitionBranch, firmwareVersion, bootfile_source)

    //Update repos
    harness.set_env('nebula_repo', 'https://github.com/sdgtt/nebula.git')
    harness.set_env('nebula_branch','dev')
    harness.set_env('telemetry_repo', 'https://github.com/sdgtt/telemetry.git')
    harness.set_env('telemetry_branch', 'master')
    
    //adjust nebula-config for now based on tested branch to address directory naming
	//if (bootPartitionBranch.contains("release") || linuxBranch.contains("release")){
	//	harness.set_env('nebula_config_branch','release')
	//}
	
    //Update nebula config from netbox
    harness.set_update_nebula_config(true)
    harness.set_env('nebula_config_source','netbox')
    harness.set_env('netbox_ip','192.168.10.11')
    harness.set_env('netbox_port','8000')
    harness.set_env('netbox_base_url','netbox')
    withCredentials([string(credentialsId: 'netbox_token', variable: 'TOKEN')]) {
      harness.set_env('netbox_token', TOKEN)
    }
    harness.set_env('netbox_devices_tag','active')
    //update first the agent with the required deps
    harness.set_required_agent(["sdg-nuc-01","sdg-nuc-02"])
    harness.update_agents()

    //Set other test parameters
    harness.set_nebula_debug(true)
    harness.set_enable_docker(true)
    harness.set_docker_host_mode(true)
    harness.set_send_telemetry(true)
    harness.set_log_artifacts(false)
    harness.set_log_jira(false)
    harness.set_enable_resource_queuing(true)
    harness.set_elastic_server('192.168.10.11')
    harness.set_required_hardware(["zynq-zc706-adv7511-fmcdaq2"])
    harness.set_docker_args(['Vivado'])
    harness.set_nebula_local_fs_source_root("artifactory.analog.com")

    // Set stages (Stages are run sequentially on agents.)
    harness.add_stage(harness.stage_library("UpdateBOOTFiles"), 'stopWhenFail',
                      harness.stage_library("RecoverBoard"))

    // Test stage
    def stage = { String board ->
        try {
            stage("Test JIF") {
                def ip = nebula('update-config network-config dutip --board-name=' + board)
                checkout scm
                sh 'git submodule update --init --recursive'
                dir('nebula'){
                    sh 'python3 -m setup.py install'
                }
                // sh 'pip3 install nebula/.'
                sh 'pip3 install pyadi-dt/.'
                sh 'pip3 install pyadi-jif/.'
                sh 'rm ad9081.yml'
                sh 'ARCH=arm TARGET_IP='+ip+' python3 -m pytest -vs tests/test_ad9680.py'
            }
        }
        finally
        {
            // dir('build'){
            // 	sh "mv Testing ${board}"
            //     xunit([CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: "${board}/**/*.xml", skipNoTestFiles: false, stopProcessingIfError: true)])
            // }
        }
    }
    harness.add_stage(stage,'continueWhenFail')
  
    // Send results
    harness.add_stage('continueWhenFail')
  
    // Go go
    harness.run_stages()
}
